<!-- ~ Hibernate, Relational Persistence for Idiomatic Java ~ ~ Copyright 
    (c) 2010, Red Hat Inc. or third-party contributors as ~ indicated by the 
    @author tags or express copyright attribution ~ statements applied by the 
    authors. All third-party contributions are ~ distributed under license by 
    Red Hat Inc. ~ ~ This copyrighted material is made available to anyone wishing 
    to use, modify, ~ copy, or redistribute it subject to the terms and conditions 
    of the GNU ~ Lesser General Public License, as published by the Free Software 
    Foundation. ~ ~ This program is distributed in the hope that it will be useful, 
    ~ but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
    ~ or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
    License ~ for more details. ~ ~ You should have received a copy of the GNU 
    Lesser General Public License ~ along with this distribution; if not, write 
    to: ~ Free Software Foundation, Inc. ~ 51 Franklin Street, Fifth Floor ~ 
    Boston, MA 02110-1301 USA -->
<persistence xmlns="http://java.sun.com/xml/ns/persistence"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd"
    version="2.0">

    <persistence-unit name="demo"
        transaction-type="RESOURCE_LOCAL">
        <description>
           Persistence unit for demo
       </description>
        
        <properties>
            <property name="javax.persistence.jdbc.driver" value="org.hsqldb.jdbc.JDBCDriver" />
            <property name="javax.persistence.jdbc.url"
                value="jdbc:hsqldb:file:./db/demoDB;DB_CLOSE_DELAY=-1;MVCC=TRUE" />
            <property name="javax.persistence.jdbc.user" value="sa" />
            <property name="javax.persistence.jdbc.password" value="" />
            <!-- since most database servers have slightly different versions of the 
                    SQL, Hibernate needs you to choose a dialect so it knows the subtleties of 
                    talking to that server -->
            <property name="hibernate.dialect" value="org.hibernate.dialect.HSQLDialect" />
            <!-- if this is true, hibernate will print (to stdout) the SQL it executes, 
                    so you can check it to ensure it's not doing anything crazy -->
            <property name="hibernate.show_sql" value="true" />
            <!-- this tell Hibernate to update the DDL when it starts, very useful 
                    for development, dangerous in production -->
                <property name="hibernate.hbm2ddl.auto" value="create" />
        </properties>


    </persistence-unit>
</persistence>